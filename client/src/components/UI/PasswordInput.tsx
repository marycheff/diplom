import { FC, useState } from "react"
import ClearableInput, { ClearableInputProps } from "@/components/ui/Input/ClearableInput"
import { RegisterOptions } from "react-hook-form"
import styles from "./PasswordInput.module.css"

interface PasswordInputProps extends ClearableInputProps {
    validationRules?: RegisterOptions
}

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
export const passwordValidation: RegisterOptions = {
    required: "–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω",
    minLength: {
        value: 8,
        message: "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤",
    },
    maxLength: {
        value: 32,
        message: "–ü–∞—Ä–æ–ª—å –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 32 —Å–∏–º–≤–æ–ª–∞",
    },
    validate: {
        hasUpperCase: value => /[A-Z]/.test(value) || "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É",
        hasLowerCase: value => /[a-z]/.test(value) || "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Ç—Ä–æ—á–Ω—É—é –±—É–∫–≤—É",
        hasNumber: value => /\d/.test(value) || "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É",
        hasSpecialChar: value =>
            /[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]/.test(value) ||
            "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª",
    },
}

const PasswordInput: FC<PasswordInputProps> = ({ validationRules = passwordValidation, ...props }) => {
    const [isVisible, setIsVisible] = useState(false)

    return (
        <div className={styles.passwordContainer}>
            <ClearableInput {...props} type={isVisible ? "text" : "password"} validationRules={validationRules} />
            <button
                type="button"
                onClick={() => setIsVisible(!isVisible)}
                className={styles.toggleButton}
                aria-label={isVisible ? "–°–∫—Ä—ã—Ç—å –ø–∞—Ä–æ–ª—å" : "–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä–æ–ª—å"}>
                {isVisible ? "üëÅÔ∏è" : "üôà"}
            </button>
        </div>
    )
}

export default PasswordInput
