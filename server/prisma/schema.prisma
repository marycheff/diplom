generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @default(uuid())
  email          String        @unique
  name           String?
  surname        String?
  patronymic     String?
  password       String
  isActivated    Boolean       @default(false)
  role           Role          @default(USER)
  activationLink String?
  resetCode      String?
  isBlocked      Boolean       @default(false)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  badWordsAdded  BadWord[]     @relation("AddedByUser")
  testAttempts   TestAttempt[] @relation("TestAttemptUser")
  testsCreated   Test[]        @relation("TestAuthor")
  refreshToken   Token?

  @@map("users")
}

model Token {
  id           String   @id @default(uuid())
  userId       String   @unique
  refreshToken String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tokens")
}

model TestSettings {
  id                  String   @id @default(uuid())
  testId              String   @unique
  requireRegistration Boolean  @default(false)
  inputFields         Json?
  showDetailedResults Boolean  @default(false)
  timeLimit           Int?     @default(0)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  test                Test     @relation(fields: [testId], references: [id], onDelete: Cascade)

  @@map("test_settings")
}

model Test {
  id            String           @id @default(uuid())
  authorId      String
  title         String
  description   String?
  status        ModerationStatus @default(PENDING)
  totalAttempts Int              @default(0)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  questions     Question[]
  testAttempts  TestAttempt[]
  settings      TestSettings?
  author        User             @relation("TestAuthor", fields: [authorId], references: [id], onDelete: Cascade)

  @@map("tests")
}

model Question {
  id          String       @id @default(uuid())
  testId      String
  text        String
  order       Int
  type        QuestionType @default(SINGLE_CHOICE)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  answers     Answer[]
  test        Test         @relation(fields: [testId], references: [id], onDelete: Cascade)
  userAnswers UserAnswer[]

  @@map("questions")
}

model Answer {
  id          String       @id @default(uuid())
  questionId  String
  text        String
  isCorrect   Boolean      @default(false)
  isGenerated Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  question    Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  userAnswers UserAnswer[]

  @@map("answers")
}

model TestAttempt {
  id          String            @id @default(uuid())
  testId      String
  userId      String?
  userData    Json?
  score       Float?
  startedAt   DateTime          @default(now())
  completedAt DateTime?
  status      TestAttemptStatus
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  test        Test              @relation(fields: [testId], references: [id], onDelete: Cascade)
  user        User?             @relation("TestAttemptUser", fields: [userId], references: [id])
  answers     UserAnswer[]

  @@map("test_attempts")
}

model UserAnswer {
  id         String      @id @default(uuid())
  attemptId  String
  questionId String
  answerId   String
  answeredAt DateTime?
  timeSpent  Int?
  createdAt  DateTime    @default(now())
  answer     Answer      @relation(fields: [answerId], references: [id], onDelete: Cascade)
  attempt    TestAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question   Question    @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@map("user_answers")
}

model BadWord {
  id        String   @id @default(uuid())
  word      String   @unique
  addedById String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  addedBy   User     @relation("AddedByUser", fields: [addedById], references: [id], onDelete: Cascade)

  @@map("bad_words")
}

enum Role {
  USER
  ADMIN
}

enum ModerationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum TestAttemptStatus {
  EXPIRED
  IN_PROGRESS
  COMPLETED
}

enum QuestionType {
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}
