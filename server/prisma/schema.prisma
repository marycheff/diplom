generator client {
  provider = "prisma-client-js"
  // output   = "app/generated/prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String        @id @default(uuid())
  email             String        @unique @db.VarChar(255)
  name              String?       @db.VarChar(50)
  surname           String?       @db.VarChar(50)
  patronymic        String?       @db.VarChar(50)
  password          String        @db.Char(60) // Для bcrypt хэша
  isActivated       Boolean       @default(false)
  role              Role          @default(USER)
  activationLink    String?       @db.VarChar(255)
  resetCode         String?       @db.VarChar(255)
  isBlocked         Boolean       @default(false)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  activationLinkExp DateTime?
  resetCodeExp      DateTime?
  testAttempts      TestAttempt[] @relation("TestAttemptUser")
  testsCreated      Test[]        @relation("TestAuthor")
  refreshToken      Token?

  @@map("users")
}

model Token {
  id           String   @id @default(uuid())
  userId       String   @unique
  refreshToken String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tokens")
}

model TestSettings {
  id                  String   @id @default(uuid())
  testId              String   @unique
  requireRegistration Boolean  @default(false)
  inputFields         Json?
  showDetailedResults Boolean  @default(false)
  timeLimit           Int?     @default(0)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  shuffleAnswers      Boolean  @default(true)
  shuffleQuestions    Boolean  @default(false)
  test                Test     @relation(fields: [testId], references: [id], onDelete: Cascade)

  @@map("test_settings")
}

model Test {
  id               String               @id @default(uuid())
  authorId         String
  title            String               @db.VarChar(100)
  description      String?              @db.VarChar(500)
  status           ModerationStatus     @default(PENDING)
  visibilityStatus TestVisibilityStatus @default(PUBLISHED)
  totalAttempts    Int                  @default(0)
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  version          Int                  @default(1)
  questions        Question[]
  testAttempts     TestAttempt[]
  settings         TestSettings?
  snapshots        TestSnapshot[]
  author           User                 @relation("TestAuthor", fields: [authorId], references: [id], onDelete: Cascade)

  @@map("tests")
}

model Question {
  id          String       @id @default(uuid())
  testId      String
  text        String       @db.VarChar(1000)
  order       Int
  type        QuestionType @default(SINGLE_CHOICE)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  answers     Answer[]
  test        Test         @relation(fields: [testId], references: [id], onDelete: Cascade)
  userAnswers UserAnswer[]

  @@map("questions")
}

model Answer {
  id          String       @id @default(uuid())
  questionId  String
  text        String       @db.VarChar(500)
  isCorrect   Boolean      @default(false)
  isGenerated Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  question    Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  userAnswers UserAnswer[]

  @@map("answers")
}

model TestAttempt {
  id              String            @id @default(uuid())
  testId          String
  userId          String?
  preTestUserData Json?
  score           Float?
  startedAt       DateTime          @default(now())
  completedAt     DateTime?
  status          TestAttemptStatus
  updatedAt       DateTime          @updatedAt
  testSnapshotId  String?
  expirationTime  DateTime?
  test            Test              @relation(fields: [testId], references: [id], onDelete: Cascade)
  snapshot        TestSnapshot?     @relation(fields: [testSnapshotId], references: [id])
  user            User?             @relation("TestAttemptUser", fields: [userId], references: [id])
  answers         UserAnswer[]

  @@map("test_attempts")
}

model UserAnswer {
  id         String      @id @default(uuid())
  attemptId  String
  questionId String
  answerId   String
  answeredAt DateTime?
  timeSpent  Int?
  createdAt  DateTime    @default(now())
  answer     Answer      @relation(fields: [answerId], references: [id], onDelete: Cascade)
  attempt    TestAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question   Question    @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@map("user_answers")
}

model TestSnapshot {
  id               String                @id @default(uuid())
  testId           String
  title            String                @db.VarChar(100)
  description      String?               @db.VarChar(500)
  status           ModerationStatus
  visibilityStatus TestVisibilityStatus  @default(PUBLISHED)
  createdAt        DateTime              @default(now())
  version          Int                   @default(1)
  questions        QuestionSnapshot[]
  attempts         TestAttempt[]
  settings         TestSettingsSnapshot?
  originalTest     Test                  @relation(fields: [testId], references: [id], onDelete: Cascade)

  @@map("test_snapshots")
}

model QuestionSnapshot {
  id             String           @id @default(uuid())
  testSnapshotId String
  originalTestId String
  text           String           @db.VarChar(1000)
  order          Int
  type           QuestionType
  createdAt      DateTime         @default(now())
  answers        AnswerSnapshot[]
  testSnapshot   TestSnapshot     @relation(fields: [testSnapshotId], references: [id], onDelete: Cascade)

  @@map("question_snapshots")
}

model AnswerSnapshot {
  id             String           @id @default(uuid())
  questionId     String
  originalTestId String
  text           String           @db.VarChar(500)
  isCorrect      Boolean          @default(false)
  createdAt      DateTime         @default(now())
  question       QuestionSnapshot @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@map("answer_snapshots")
}

model TestSettingsSnapshot {
  id                  String       @id @default(uuid())
  testSnapshotId      String       @unique
  requireRegistration Boolean      @default(false)
  inputFields         Json?
  showDetailedResults Boolean      @default(false)
  shuffleQuestions    Boolean      @default(false)
  shuffleAnswers      Boolean      @default(true)
  timeLimit           Int?         @default(0)
  createdAt           DateTime     @default(now())
  snapshot            TestSnapshot @relation(fields: [testSnapshotId], references: [id], onDelete: Cascade)

  @@map("test_settings_snapshots")
}

enum Role {
  USER
  ADMIN
}

enum ModerationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum TestAttemptStatus {
  EXPIRED
  IN_PROGRESS
  COMPLETED
}

enum QuestionType {
  SINGLE_CHOICE // Одиночный выбор 
  MULTIPLE_CHOICE // Множественный выбор 
  TEXT_INPUT // Текстовый ввод 
  MATCHING // Сопоставление элементов 
  FILL_IN_THE_BLANK // Вставка пропущенных слов 
  SEQUENCE // Вопрос на последовательность 
}

enum TestVisibilityStatus {
  HIDDEN
  PUBLISHED
}

// 12 таблиц 3 enum
